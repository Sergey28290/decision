Отчёт о проведенном нагрузочном тестировании

1. Введение

Цель тестирования: определить, как API-система ведет себя под различными типами нагрузки, выявить её пределы устойчивости, стабильности и производительности.

Сценарии тестирования: смоделированы два типа сценариев:
- Постепенное увеличение нагрузки (Linear Load)
- Ступенчатое увеличение нагрузки (Stepped Load)

Тестируемая система: API-интерфейс, предоставляющий базовые HTTP-методы: GET, POST, PUT, PATCH, DELETE.

Окружение: информация об окружении не предоставлена (возможно дополнить позже). Предполагается использование JMeter в среде с имитацией нагрузки в пределах 30 виртуальных пользователей.

Методология:
- Типы тестов: нагрузочное тестирование (Load), стресс-тестирование (в пределах сценариев)
- Инструмент: Apache JMeter
- Продолжительность: в пределах нескольких минут на каждый сценарий

2. Сценарии тестирования

Сценарий 1: Linear Load
- Постепенное увеличение числа пользователей от 1 до 30
- Цель: оценить, как система реагирует на равномерно растущую нагрузку

Сценарий 2: Stepped Load
- Нагрузка увеличивается скачкообразно
- Цель: смоделировать поведение системы при резком росте количества одновременных пользователей

Критерии успешности:
- Время отклика: не более 1000 мс для 95% запросов
- Процент ошибок: не более 5%

3. Метрики и результаты тестирования

Процент ошибок:
- Все типы запросов (GET, POST, PUT, PATCH, DELETE) отработали стабильно
- Ошибок не зафиксировано, процент ошибок = 0% во всех сценариях

Время отклика:
- GET-запрос: самое высокое среднее время отклика — ~905 мс, пиковое — 3607 мс
- Остальные (POST, PUT, PATCH, DELETE): среднее ~360–370 мс, максимум ~2200–2900 мс

90-й перцентиль:
- GET: ~1609 мс
- Остальные: ~980–1030 мс

95-й перцентиль:
- GET: ~1869 мс
- Остальные: ~1260–1290 мс

Сравнение сценариев:
- Linear Load: показал стабильную производительность, средние значения ниже, отклик более предсказуемый
- Stepped Load: время отклика увеличивается, особенно для GET, перцентиль и максимумы выше

4. Анализ результатов

Производительность:
- Система справляется с нагрузкой до 30 виртуальных пользователей без сбоев

Узкие места:
- GET-запрос — самый медленный, особенно при Stepped Load
- Возможные причины: отсутствие кеширования, большой объём возвращаемых данных

Ошибки:
- Не зафиксировано, стабильность высокая

5. Рекомендации

1. Оптимизация GET-запроса:
   - Проверить объём возвращаемых данных
   - Реализовать кэширование
   - Уточнить необходимость всех возвращаемых полей

2. Масштабирование:
   - Тестировать при более высокой нагрузке (50–100 пользователей)
   - Внедрить балансировку нагрузки при высоких RPS

3. Настройки:
   - Увеличить размер thread pool, если требуется выше throughput

6. Заключение

Система соответствует заданным критериям стабильности и производительности при текущей нагрузке.

Возможности:
- Обработка до 30 виртуальных пользователей без ошибок
- Среднее время отклика для большинства операций — менее 400 мс
- GET-запрос требует внимания: его максимальные задержки могут достигать 3.5 сек

Рекомендации:
- Повторное тестирование после оптимизации GET-запроса
- Проведение soak и stress-тестирования при более длительной нагрузке
