Финальный отчёт о нагрузочном тестировании


1. Введение

Цель тестирования: Проверка производительности API-системы под стабильной нагрузкой до 100 пользователей в течение 10 минут, с равномерной активностью по всем операциям.  
Тестируемая система: REST API, предоставляющий методы GET, POST, PUT, PATCH, DELETE.  
Инструмент тестирования: Apache JMeter  
Методология: нагрузочное тестирование с равномерной активностью всех виртуальных пользователей.

2. Сценарии тестирования

- Все 100 пользователей последовательно выполняли один и тот же набор из 5 HTTP-запросов.
- Общая продолжительность теста составила 10 минут.
- Между запросами использовался Uniform Random Timer (0.5–1.5 сек) для имитации реального поведения.

3. Метрики и результаты

Ошибки:
- Все запросы завершились успешно. Процент ошибок = 0%.

Время отклика:
- Среднее время отклика:
  - GET: 781 мс
  - Остальные (POST, PUT, PATCH, DELETE): 286–292 мс

- Пиковое время отклика (макс. значение):
  - GET: 2334 мс
  - Остальные: 1730–2012 мс

- 90-й перцентиль:
  - GET: 1066 мс
  - Остальные: ~566–571 мс

- 95-й перцентиль:
  - GET: 1296 мс
  - Остальные: ~783–801 мс

4. Анализ результатов

- Все метрики уложились в допустимые границы (ошибки отсутствуют, 95% запросов — менее 1.3 секунды).
- GET-запрос остаётся самым ресурсоёмким, но работает быстрее, чем в предыдущем тесте (где он доходил до 3.6 сек).
- Остальные типы операций стабильны, с равномерным распределением и приемлемым временем отклика.
- Система демонстрирует высокую устойчивость под длительной стабильной нагрузкой в 100 VU.

5. Рекомендации

- GET-запрос можно дополнительно оптимизировать (если цель — уложиться в 1 секунду по 95-му перцентилю).
- Провести тесты с повышенной нагрузкой (150–200 пользователей) для оценки масштабируемости.
- Добавить мониторинг ресурсов (CPU, RAM) в следующих итерациях.

6. Заключение

API-система стабильно обрабатывает нагрузку от 100 одновременных пользователей:
- Ошибки отсутствуют
- Время отклика приемлемо
- Система готова к эксплуатации при текущем уровне трафика

Рекомендуется масштабирование тестов для верификации на больших объёмах.


